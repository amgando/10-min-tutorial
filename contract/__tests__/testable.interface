import { u128, VM, Context as VMContext } from "near-sdk-as";

/**
 * VM CONTROLS
 */
VM.outcome()                     // final execution outcome
VM.outcome().balance
VM.outcome().burnt_gas
VM.outcome().logs
VM.outcome().return_data
VM.outcome().storage_usage
VM.outcome().used_gas

VM.saveState()                  // state management
VM.restoreState()

/**
s * VM CONTEXT CONTROLS
 */
VMContext.saveContext()
VMContext.setAccount_balance(u128.from(100))
VMContext.setAttached_deposit(u128.from(100))
VMContext.setBlock_index(100)
VMContext.setBlock_timestamp(+ Date())
VMContext.setCurrent_account_id("alice")
VMContext.setInput("input?")
VMContext.setIs_view("wat?")

let output: string[] = []
VMContext.setOutput_data_receivers(output)
VMContext.setPredecessor_account_id("bob")
VMContext.setPrepaid_gas(100)
VMContext.setRandom_seed("seed?")
VMContext.setSigner_account_id("carol")
VMContext.setSigner_account_pk("pk?")
VMContext.setStorage_usage(100)
VMContext.restoreContext()

u128.add( u128.from(1), u128.from(2) )
u128.sub( u128.from(2), u128.from(1) )
u128.mul( u128.from(2), u128.from(2) )
u128.div( u128.from(3), u128.from(2) )
u128.div10(u128.from(100))

u128.and( u128.fromBool(true), u128.fromBool(true) )
u128.or( u128.fromBool(true), u128.fromBool(true) )


u128.Max
u128.Min
u128.One
u128.Zero

u128.clz
u128.ctz
u128.cmp
u128.eq

/**
 * CONVERSIONS
 */

u128.from               // convert from any
u128.fromBits
u128.fromBool
u128.fromBytes
u128.fromBytesBE
u128.fromBytesLE
u128.fromF32
u128.fromF64
u128.fromI128
u128.fromI256
u128.fromI32
u128.fromI64
u128.fromString
u128.fromU128
u128.fromU256
u128.fromU32
u128.fromU64
u128.fromUint8ArrayBE
u128.fromUint8ArrayLE

u128.ge
u128.gt
u128.le
u128.lt
u128.ne

u128.isEmpty
u128.length
u128.mulq
u128.name

u128.popcnt



u128.pow
u128.sqr
u128.sqrt

u128.rem
u128.rem10

u128.rotl
u128.rotr
u128.shl
u128.shr
u128.shr_u

u128.toString
u128.xor


export function name(): string {}


export function symbol(): string {}


export function decimals(): u8 {}


export function totalSupply(): u128 {}


export function balanceOf(owner: string): u128 {}


export function transfer(to: string, value: u128): boolean {}


export function transferFrom(from: string, to: string, value: u128): boolean {}


export function approve(spender: string, value: u128): boolean {}


export function allowance(owner: string, spender: string): u128 {}


export function customize(){}

export function initialize(): boolean { return true }


export function exchange(): u128 { return u128.Zero}

